/**
 * Utilities for managing .env.local file
 */

import * as fs from "fs";
import * as path from "path";
import type { EnvVars } from "../types";

const ENV_PATH = path.join(process.cwd(), ".env.local");

/**
 * Read all environment variables from .env.local
 */
export function readEnvLocal(): EnvVars {
    if (!fs.existsSync(ENV_PATH)) {
        return {};
    }

    const content = fs.readFileSync(ENV_PATH, "utf-8");
    const vars: EnvVars = {};

    for (const line of content.split("\n")) {
        const trimmed = line.trim();

        // Skip comments and empty lines
        if (!trimmed || trimmed.startsWith("#")) {
            continue;
        }

        const equalIndex = trimmed.indexOf("=");
        if (equalIndex === -1) continue;

        const key = trimmed.substring(0, equalIndex).trim();
        let value = trimmed.substring(equalIndex + 1).trim();

        // Remove surrounding quotes if present
        if (
            (value.startsWith('"') && value.endsWith('"')) ||
            (value.startsWith("'") && value.endsWith("'"))
        ) {
            value = value.slice(1, -1);
        }

        vars[key] = value;
    }

    return vars;
}

/**
 * Get a specific environment variable from .env.local
 */
export function getEnvVar(key: string): string | undefined {
    const vars = readEnvLocal();
    return vars[key];
}

/**
 * Update .env.local with new variables
 * Preserves existing variables and comments
 * @param newVars Object with key-value pairs to add/update
 */
export function updateEnvLocal(newVars: EnvVars): void {
    let content = "";

    if (fs.existsSync(ENV_PATH)) {
        content = fs.readFileSync(ENV_PATH, "utf-8");
    }

    const lines = content.split("\n");
    const updatedKeys = new Set<string>();

    // Update existing keys
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmed = line.trim();

        // Skip comments and empty lines
        if (!trimmed || trimmed.startsWith("#")) {
            continue;
        }

        const equalIndex = trimmed.indexOf("=");
        if (equalIndex === -1) continue;

        const key = trimmed.substring(0, equalIndex).trim();

        if (key in newVars) {
            const value = newVars[key];
            lines[i] = `${key}=${formatEnvValue(value)}`;
            updatedKeys.add(key);
        }
    }

    // Add new keys at the end
    for (const [key, value] of Object.entries(newVars)) {
        if (!updatedKeys.has(key) && value !== undefined) {
            lines.push(`${key}=${formatEnvValue(value)}`);
        }
    }

    // Write back to file
    const newContent = lines.join("\n");
    fs.writeFileSync(ENV_PATH, newContent, "utf-8");
}

/**
 * Format environment variable value
 * Adds quotes if value contains spaces or special characters
 */
function formatEnvValue(value: string | undefined): string {
    if (value === undefined) return "";

    // Add quotes if value contains spaces or special chars
    if (/[\s#]/.test(value)) {
        return `"${value}"`;
    }

    return value;
}

/**
 * Check if .env.local exists
 */
export function envFileExists(): boolean {
    return fs.existsSync(ENV_PATH);
}

/**
 * Create .env.local file with initial content
 */
export function createEnvFile(initialVars: EnvVars = {}): void {
    const lines = [
        "# Local environment variables",
        "# Auto-generated by setup script",
        "",
    ];

    for (const [key, value] of Object.entries(initialVars)) {
        if (value !== undefined) {
            lines.push(`${key}=${formatEnvValue(value)}`);
        }
    }

    fs.writeFileSync(ENV_PATH, lines.join("\n") + "\n", "utf-8");
}

/**
 * Validate that required environment variables exist and are non-empty
 */
export function validateEnvVars(requiredKeys: string[]): {
    valid: boolean;
    missing: string[];
} {
    const vars = readEnvLocal();
    const missing: string[] = [];

    for (const key of requiredKeys) {
        if (!vars[key] || vars[key]?.trim() === "") {
            missing.push(key);
        }
    }

    return {
        valid: missing.length === 0,
        missing,
    };
}
