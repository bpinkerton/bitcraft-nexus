openapi: 3.0.3
info:
  title: Workspace Restructuring API
  description: API for managing monorepo workspaces and Discord bot integration
  version: 1.0.0
  contact:
    name: Bitcraft Nexus Team
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://bitcraft-nexus.vercel.app/api
    description: Production server

paths:
  /workspaces:
    get:
      summary: List all workspaces
      description: Retrieve all workspaces in the monorepo
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
    post:
      summary: Create new workspace
      description: Create a new workspace in the monorepo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
      responses:
        '201':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkspaceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /workspaces/{name}:
    get:
      summary: Get workspace details
      description: Retrieve detailed information about a specific workspace
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Workspace name
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDetailsResponse'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /workspaces/{name}/build:
    post:
      summary: Build workspace
      description: Trigger a build for a specific workspace
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Workspace name
      responses:
        '200':
          description: Build started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /packages:
    get:
      summary: List shared packages
      description: Retrieve all shared packages in the monorepo
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageListResponse'
    post:
      summary: Create shared package
      description: Create a new shared package
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePackageRequest'
      responses:
        '201':
          description: Package created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedPackage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /packages/{name}:
    put:
      summary: Update shared package
      description: Update an existing shared package
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Package name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePackageRequest'
      responses:
        '200':
          description: Package updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedPackage'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schema:
    get:
      summary: Get database schema
      description: Retrieve current database schema information
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaResponse'

  /schema/migrate:
    post:
      summary: Apply schema migrations
      description: Apply database schema migrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateRequest'
      responses:
        '200':
          description: Migration completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrateResponse'
        '400':
          description: Migration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schema/status:
    get:
      summary: Check schema status
      description: Check schema synchronization status across workspaces
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaStatusResponse'

  /discord/webhook:
    post:
      summary: Discord webhook handler
      description: Handle Discord webhook events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordWebhookRequest'
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordWebhookResponse'
        '400':
          description: Invalid webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /discord/commands:
    get:
      summary: List Discord commands
      description: Retrieve all registered Discord commands
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordCommandsResponse'
    post:
      summary: Register Discord command
      description: Register a new Discord command
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCommandRequest'
      responses:
        '201':
          description: Command registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordCommand'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /builds:
    get:
      summary: List recent builds
      description: Retrieve recent builds across all workspaces
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildsResponse'

  /deploy/{workspace}:
    post:
      summary: Deploy workspace
      description: Deploy a specific workspace
      parameters:
        - name: workspace
          in: path
          required: true
          schema:
            type: string
          description: Workspace name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployRequest'
      responses:
        '200':
          description: Deployment started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResponse'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Workspace:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [app, package]
        path:
          type: string
        status:
          type: string
          enum: [active, inactive, building, deploying]
        lastBuilt:
          type: string
          format: date-time
        dependencies:
          type: array
          items:
            type: string

    WorkspaceListResponse:
      type: object
      properties:
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
        total:
          type: integer

    CreateWorkspaceRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [app, package]
        template:
          type: string
          enum: [nextjs, discord-bot, shared-package]
        dependencies:
          type: array
          items:
            type: string

    CreateWorkspaceResponse:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        success:
          type: boolean
        message:
          type: string

    WorkspaceDetailsResponse:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        buildConfig:
          $ref: '#/components/schemas/BuildConfiguration'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/SharedPackage'
        recentBuilds:
          type: array
          items:
            $ref: '#/components/schemas/BuildLog'

    BuildConfiguration:
      type: object
      properties:
        workspaceId:
          type: string
        buildCommand:
          type: string
        testCommand:
          type: string
        deployCommand:
          type: string
        environment:
          type: object
          additionalProperties:
            type: string
        dependencies:
          type: array
          items:
            type: string

    BuildResponse:
      type: object
      properties:
        buildId:
          type: string
        status:
          type: string
          enum: [started, building, success, failed]
        logs:
          type: array
          items:
            type: string
        duration:
          type: number
        error:
          type: string

    SharedPackage:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        type:
          type: string
          enum: [utility, config, types, database]
        usedBy:
          type: array
          items:
            type: string
        lastUpdated:
          type: string
          format: date-time

    PackageListResponse:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/SharedPackage'
        total:
          type: integer

    CreatePackageRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [utility, config, types, database]
        template:
          type: string
          enum: [utility, config, types, database]
        dependencies:
          type: array
          items:
            type: string

    UpdatePackageRequest:
      type: object
      properties:
        version:
          type: string
        dependencies:
          type: array
          items:
            type: string
        exports:
          type: object
          additionalProperties:
            type: string

    SchemaResponse:
      type: object
      properties:
        version:
          type: string
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableDefinition'
        lastUpdated:
          type: string
          format: date-time
        checksum:
          type: string

    TableDefinition:
      type: object
      properties:
        name:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinition'
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/IndexDefinition'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintDefinition'

    ColumnDefinition:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        nullable:
          type: boolean
        defaultValue:
          type: string
        constraints:
          type: array
          items:
            type: string

    IndexDefinition:
      type: object
      properties:
        name:
          type: string
        columns:
          type: array
          items:
            type: string
        unique:
          type: boolean
        type:
          type: string
          enum: [btree, hash, gin, gist]

    ConstraintDefinition:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [primary, foreign, unique, check]
        columns:
          type: array
          items:
            type: string
        references:
          type: object
          properties:
            table:
              type: string
            column:
              type: string

    MigrateRequest:
      type: object
      required: [migrations]
      properties:
        migrations:
          type: array
          items:
            type: string
        dryRun:
          type: boolean

    MigrateResponse:
      type: object
      properties:
        success:
          type: boolean
        appliedMigrations:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        duration:
          type: number

    SchemaStatusResponse:
      type: object
      properties:
        workspaces:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              schemaVersion:
                type: string
              inSync:
                type: boolean
              lastChecked:
                type: string
                format: date-time
        overallStatus:
          type: string
          enum: [synced, out-of-sync, error]

    DiscordWebhookRequest:
      type: object
      required: [type, data, signature, timestamp]
      properties:
        type:
          type: string
          enum: [interaction, message, command]
        data:
          type: object
        signature:
          type: string
        timestamp:
          type: string

    DiscordWebhookResponse:
      type: object
      properties:
        success:
          type: boolean
        response:
          type: object
        error:
          type: string

    DiscordCommand:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [slash, message, user, message]
        options:
          type: array
          items:
            $ref: '#/components/schemas/CommandOption'
        enabled:
          type: boolean

    DiscordCommandsResponse:
      type: object
      properties:
        commands:
          type: array
          items:
            $ref: '#/components/schemas/DiscordCommand'
        total:
          type: integer

    RegisterCommandRequest:
      type: object
      required: [name, description, type, handler]
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [slash, message, user, message]
        options:
          type: array
          items:
            $ref: '#/components/schemas/CommandOption'
        handler:
          type: string

    CommandOption:
      type: object
      required: [name, description, type]
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [string, integer, boolean, user, channel]
        required:
          type: boolean
        choices:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string

    BuildLog:
      type: object
      properties:
        id:
          type: string
        workspace:
          type: string
        status:
          type: string
          enum: [success, failed, building]
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        duration:
          type: number
        logs:
          type: array
          items:
            type: string
        error:
          type: string

    BuildsResponse:
      type: object
      properties:
        builds:
          type: array
          items:
            $ref: '#/components/schemas/BuildLog'
        total:
          type: integer

    DeployRequest:
      type: object
      required: [environment]
      properties:
        environment:
          type: string
          enum: [development, staging, production]
        force:
          type: boolean

    DeployResponse:
      type: object
      properties:
        deploymentId:
          type: string
        status:
          type: string
          enum: [started, deploying, success, failed]
        url:
          type: string
        logs:
          type: array
          items:
            type: string
        error:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time
